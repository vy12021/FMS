<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://java.sun.com/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
                      http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
         version="3.0"
         metadata-complete="true">

    <display-name>Spring MVC Application</display-name>


    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>/static/*</url-pattern>
    </servlet-mapping>

    <!-- home page 配置 -->
    <welcome-file-list>
        <welcome-file>/WEB-INF/pages/index.jsp</welcome-file>
    </welcome-file-list>

    <error-page>
        <error-code>403</error-code>
        <location>/WEB-INF/pages/errors/NotFound.jsp</location>
    </error-page>
    <error-page>
        <error-code>404</error-code>
        <location>/WEB-INF/pages/errors/NotFound.jsp</location>
    </error-page>
    <error-page>
        <error-code>405</error-code>
        <location>/WEB-INF/pages/errors/NotFound.jsp</location>
    </error-page>
    <error-page>
        <error-code>500</error-code>
        <location>/WEB-INF/pages/errors/NotFound.jsp</location>
    </error-page>

    <!-- 指定spring配置文件，多个配置文件中间用逗号、空格、分号隔开都行-->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>
            classpath:applicationContext*.xml
        </param-value>
    </context-param>

    <!-- Shiro 配置加载监听器 无框架集成时Filter-->
    <!--
        <listener>
            <listener-class>org.apache.shiro.web.env.EnvironmentLoaderListener</listener-class>
        </listener>

        <filter>
            <filter-name>ShiroFilter</filter-name>
            <filter-class>org.apache.shiro.web.servlet.ShiroFilter</filter-class>
        </filter>
        <filter-mapping>
            <filter-name>ShiroFilter</filter-name>
            <url-pattern>/*</url-pattern>
            <dispatcher>REQUEST</dispatcher>
            <dispatcher>FORWARD</dispatcher>
            <dispatcher>INCLUDE</dispatcher>
            <dispatcher>ERROR</dispatcher>
        </filter-mapping>
    -->
    <!-- spring 集成的shiro Filter放在其他filter-mapping之前 -->
    <filter>
        <filter-name>shiroFilter</filter-name>
        <filter-class>
            org.springframework.web.filter.DelegatingFilterProxy
        </filter-class>
        <init-param>
            <!--该值缺省为false,表示生命周期由SpringApplicationContext管理,设置为true则表示由ServletContainer管理-->
            <param-name>targetFilterLifecycle</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>shiroFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>


    <!--方案一：激活 Tomcat 的 defaultServlet 来处理静态资源,
        处理静态资源调用Tomcat的默认处理器servlet-name为default
        DefaultServlet为tomcat的jar包类 -->
    <!--Tomcat, Jetty, JBoss, and GlassFish：默认 Servlet 名字为 "default"
        Google App Engine：默认 Servlet 名字为 "_ah_default"
        Resin：默认 Servlet 名字为 "resin-file"
        WebLogic：默认 Servlet 名字为 "FileServlet"
        WebSphere：默认 Servlet 名字为 "SimpleFileServlet"-->

    <!-- 每种类型的静态资源需要分别配置一个 servlet-mapping，
        同时，要写在 DispatcherServlet 的前面， 让 defaultServlet 先拦截。-->

    <!--<servlet>
        <servlet-name>default</servlet-name>
        <servlet-class>**.DefaultServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.jpg</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.js</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.css</url-pattern>
    </servlet-mapping>-->


    <!-- servlet请求控制分发核心"spring mvc core" -->
    <servlet>
        <servlet-name>dispatcher</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!-- 配置文件,默认寻找WEB-INF目录下的servlet-name-servlet.xml作为它的WebApplicationContext
             也可以手工指定位置和名称，就是设置下面的初始化参数-->
        <!--<init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>/WEB-INF/dispatcher-servlet.xml</param-value>
        </init-param>-->
        <!-- 启动优先级 -->
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>dispatcher</servlet-name>
        <!-- 跳转字符串匹配 -->
        <!-- 在web.xml文件中，以下语法用于定义映射：
        l. 以”/’开头和以”/*”结尾的是用来做路径映射的。
        2. 以前缀”*.”开头的是用来做扩展映射的。
        3. “/” 是用来定义default servlet映射的。
        4. 剩下的都是用来定义详细映射的。比如： /aa/bb/cc.action
        所以，为什么定义”/*.action”这样一个看起来很正常的匹配会错？
        因为这个匹配即属于路径映射，也属于扩展映射，导致容器无法判断。  -->
        <url-pattern>/</url-pattern>
    </servlet-mapping>


    <!-- 字符集过滤器 -->
    <filter>
        <filter-name>characterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <init-param>
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>characterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!--If using the default servlet container support, you configure session timeout as expected-->
    <session-config>
        <!-- web.xml expects the session timeout in minutes: -->
        <session-timeout>30</session-timeout>
    </session-config>
    <!-- 配置spring管理OpenEntityManagerInViewFilter-->
    <!--OpenEntityManagerInViewFilter会让session一直到view层调用结束后才关闭
    Spring针对Hibernate的非JPA实现用的是OpenSessionInViewFilter，原理与这个大同小异
     -->
    <!--<filter>
        <filter-name>hibernateFilter</filter-name>
        <filter-class>
            org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter
        </filter-class>
    </filter>
    <filter-mapping>
        <filter-name>hibernateFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>-->

    <!-- Spring Integrated Shiro filter-->
    <!--这里filter-name必须对应applicationContext.xml中定义的<bean id="shiroFilter"/> -->


    <!-- 以下3项参数与log4j的配置相关 -->
    <!-- 日志配置文件位置 -->
    <context-param>
        <param-name>log4jConfigLocation</param-name>
        <param-value>classpath:log4j.properties</param-value>
    </context-param>

    <!-- 日志配置文件刷新周期 -->
    <context-param>
        <param-name>log4jRefreshInterval</param-name>
        <param-value>60000</param-value>
    </context-param>
    <!-- log4j监听器 -->
    <listener>
        <listener-class>
            org.springframework.web.util.Log4jConfigListener
        </listener-class>
    </listener>

    <!--防止发生java.beans.Introspector内存泄露,应将它配置在ContextLoaderListener的前面 -->
    <!--详细描述见http://blog.csdn.net/jadyer/article/details/11991457 -->
    <listener>
        <listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
    </listener>

    <!-- Spring上下文监听器 -->
    <!--应用启动时,该监听器被执行,它会读取Spring相关配置文件,其默认会到WEB-INF中查找applicationContext.xml-->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <listener>
        <listener-class>com.vy12021.framework.util.validatecode.ClearValicodeImageListener</listener-class>
    </listener>

</web-app>